// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __assign } from "tslib";
import { StorageClientContext } from "./generated/src/storageClientContext";
import { escapeURLPath, getAccountNameFromUrl } from "./utils/utils.common";
import { SERVICE_VERSION } from "./utils/constants";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { isNode } from "@azure/core-http";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
/**
 * A StorageClient represents a base client class for ServiceClient, ContainerClient and etc.
 */
var StorageClient = /** @class */ (function () {
    /**
     * Creates an instance of StorageClient.
     * @param url -
     * @param pipeline -
     */
    function StorageClient(url, pipeline) {
        // URL should be encoded and only once, protocol layer shouldn't encode URL again
        this.url = escapeURLPath(url);
        this.accountName = getAccountNameFromUrl(url);
        this.pipeline = pipeline;
        this.storageClientContext = new StorageClientContext(this.url, __assign({ version: SERVICE_VERSION }, pipeline.toServiceClientOptions()));
        // Remove the default content-type in generated code of StorageClientContext
        var storageClientContext = this.storageClientContext;
        if (storageClientContext.requestContentType) {
            storageClientContext.requestContentType = undefined;
        }
        // Retrieve credential from the pipeline.
        this.credential = new AnonymousCredential();
        for (var _i = 0, _a = this.pipeline.factories; _i < _a.length; _i++) {
            var factory = _a[_i];
            if ((isNode && factory instanceof StorageSharedKeyCredential) ||
                factory instanceof AnonymousCredential) {
                this.credential = factory;
                break;
            }
        }
    }
    return StorageClient;
}());
export { StorageClient };
//# sourceMappingURL=StorageClient.js.map